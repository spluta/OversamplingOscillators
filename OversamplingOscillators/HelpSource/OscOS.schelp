TITLE:: OscOS
summary:: Oversampled Wavetable Oscillator
categories:: UGens>Oscillator
related:: BuchlaFoldOS, ShaperOS, OscOS3

DESCRIPTION::
An oversampled wavetable oscillator that interpolates between adjacent tables.


CLASSMETHODS::

METHOD:: ar
audio rate

ARGUMENT:: bufnum
The buffer of the wavetable. This ugen always uses a single buffer, but it can interpolated between adjacent tables that reside in a single buffer.

OscSC uses standard buffers, not specially formatted Wavetable buffers like Osc and VOsc.

ARGUMENT:: phase
Values between 0-1. OscOS does not have its own internal clock. Instead it relies on a phasor lookup.

ARGUMENT:: bufdivs
The number of separate wavetables in the provided buffer.

ARGUMENT:: bufloc
Values between 0-1. Points the current wavetable. Values between wavetables will result in a linearly interpolated output between wavetables. The value indicates the location in the buffer array. Divisions are at bufindex/numbufs-1. So, with 4 buffers, the divisions are at 0, 0.333, 0.666, and 1, etc.

ARGUMENT:: oversample
OverSampling Index

0 = none, 1 = 2x, 2 = 4x, 3 = 8x, 4 = 16x

ARGUMENT:: mul
amplitude multiplier

ARGUMENT:: add
value added to the signal



INSTANCEMETHODS::


EXAMPLES::

code::
//fill a buffer with 4 different waveforms
(
    t = Signal.sineFill(2048, [1], [0]);
    u = Signal.sineFill(2048, 1.0/(1..56));
    w = Signal.sineFill(2048, 1.0/(1..56)*([1,0]!28).flatten);
    x = Signal.sineFill(2048, 1.0/((1..56)**2)*([1,0,-1,0]!14).flatten);
    v = t.addAll(u).addAll(w).addAll(x);

    b = Buffer.loadCollection(s, v);
)

//plot the buffer if you like
b.plot;

(
    {
        var phase = Phasor.ar(0,100/SampleRate.ir);
        var osc = OscOS.ar(b,phase,4,MouseX.kr,4,0.1);
        osc
    }.scope
)

//LFSaw also works
(
    {
        var phase = [Phasor.ar(0,100/SampleRate.ir),LFSaw.ar(100,1).range(0,1)];
        var osc = OscOS.ar(b,phase,4,MouseX.kr,4,0.1);
        osc
    }.scope
)

//modulate the buffer location very quickly

(
    t = Signal.sineFill(1024, [1], [0]);
    u = Env([0,1,-1,0],[0.25,0.5,0.25]).asSignal(1024);
    v = t.addAll(u);

    b = Buffer.loadCollection(s, v);
)

//plot the buffer if you like
b.plot;

(
    {
        var phase = LFSaw.ar(400).range(0,1);
        var osc = OscOS.ar(b,phase,2,SinOsc.ar(MouseY.kr(1,20)).range(0,1));
        osc.dup*0.1
    }.scope
)

//using a phase input allows for fun wavetable warping
//(at high frequencies and extreme warping, the internal algorithm will distort)
(
    {
        var phase = LFSaw.ar(100,1);
        var osc;
        var midpoint = MouseY.kr(0.1,0.9);
        phase = Select.ar(phase>0,[
            phase.bilin(midpoint.neg,-1,0,-0.5,-1,0),
            phase.bilin(midpoint,0,1,0.5,0,1)
        ])*0.5+0.5;
        osc = OscOS.ar(b,phase,2,MouseX.kr,4,0.1);
        osc.dup
    }.scope
)

(
    {
        var phase = LFSaw.ar(100,1);
        var osc;
        var midpoint = MouseY.kr(0.1,0.9);
        phase = Select.ar(phase>0,[
            phase.bilin(midpoint.neg,-1,0,(1-midpoint).neg,-1,0),
            phase.bilin(midpoint,0,1,1-midpoint,0,1)
        ])*0.5+0.5;
        osc = OscOS.ar(b,phase,2,MouseX.kr,4,0.1);
        osc.dup
    }.scope
)

//LFSaw works best for frequency modulation
(
    {
        var fm = SinOsc.ar(100,-0.1,MouseY.kr(0,5000));
        var phase = LFSaw.ar(50+fm).range(0,1);
        var osc = OscOS.ar(b,phase,2,MouseX.kr,4, 0.1);
        osc.dup
    }.scope
)

//build a mipmap of a sawtooth wave for an oscillator with almost no aliasing
(
	u = (16..0).collect{|i| 
		Signal.sineFill(2048, 1.0/(1..(2**i)));
	};
	
	~sndBuf = Buffer.loadCollection(s, u.flat);
)

(
	{
		var freq = SinOsc.ar(0.1, 1.5pi).linlin(-1, 1, 10, 16000);
		var buf_loc = freq.abs.curvelin(43,SampleRate.ir/4,0,u.size, 8).poll;
		var phase = LFSaw.ar(freq, 0, 0.5, 0.5);
		OscOS.ar(~sndBuf, phase, 17, buf_loc/u.size, 1).dup*0.1;
	}.scope;
)

//view the scope - so clean
s.freqScope

//you can also load samples from commercial wavetable oscillators
c = Buffer.read(s, "/Users/spluta1/Music/Vital/Glorkglunk/Wavetables/Granular Upgrade.wav")

(
    {
        var phase = LFSaw.ar(53.midicps/4).range(0,1);
        var osc = OscOS.ar(c,phase,108,MouseX.kr.poll);
        osc.dup*0.2
    }.scope
)

::